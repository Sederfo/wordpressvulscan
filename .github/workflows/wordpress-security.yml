name: WordPress Security Vulnerability Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'
  workflow_dispatch:

env:
  MYSQL_ROOT_PASSWORD: ${{ secrets.vlad_marius_MYSQL_ROOT_PASS }}
  MYSQL_DATABASE: wordpress_security_db
  MYSQL_USER: wp_security_user
  MYSQL_PASSWORD: ${{ secrets.vlad_marius_MYSQL_USER_PASS }}
  WORDPRESS_DB_HOST: mysql:3306
  WORDPRESS_DB_NAME: wordpress_security_db
  WORDPRESS_DB_USER: wp_security_user
  WORDPRESS_DB_PASSWORD: ${{ secrets.vlad_marius_MYSQL_USER_PASS }}
  WORDPRESS_ADMIN_USER: ${{ secrets.vlad_marius_WP_ADMIN_USER }}
  WORDPRESS_ADMIN_PASS: ${{ secrets.vlad_marius_WP_ADMIN_PASS }}
  WORDPRESS_ADMIN_EMAIL: ${{ secrets.vlad_marius_WP_ADMIN_EMAIL }}

jobs:
  wordpress-security-scan:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        wordpress_config:
          - name: "wordpress-latest"
            version: "latest"
            plugins: "akismet,jetpack"
            theme: "twentytwentythree"
            port: "8080"
          - name: "wordpress-legacy"
            version: "5.8"
            plugins: "contact-form-7,woocommerce"
            theme: "twentytwenty"
            port: "8081"
          - name: "wordpress-vulnerable"
            version: "5.0"
            plugins: "ultimate-member,wp-file-manager"
            theme: "twentynineteen"
            port: "8082"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Docker network
      run: docker network create wordpress-security-net

    - name: Start MySQL Database
      run: |
        docker run -d \
          --name mysql-${{ matrix.wordpress_config.name }} \
          --network wordpress-security-net \
          -e MYSQL_ROOT_PASSWORD=${{ env.MYSQL_ROOT_PASSWORD }} \
          -e MYSQL_DATABASE=${{ env.MYSQL_DATABASE }} \
          -e MYSQL_USER=${{ env.MYSQL_USER }} \
          -e MYSQL_PASSWORD=${{ env.MYSQL_PASSWORD }} \
          mysql:8.0

    - name: Wait for MySQL to be ready
      run: |
        timeout 60 bash -c 'until docker exec mysql-${{ matrix.wordpress_config.name }} mysqladmin ping -h localhost --silent; do sleep 2; done'

    - name: Start WordPress Site - ${{ matrix.wordpress_config.name }}
      run: |
        docker run -d \
          --name wp-${{ matrix.wordpress_config.name }} \
          --network wordpress-security-net \
          -p ${{ matrix.wordpress_config.port }}:80 \
          -e WORDPRESS_DB_HOST=${{ env.WORDPRESS_DB_HOST }} \
          -e WORDPRESS_DB_NAME=${{ env.WORDPRESS_DB_NAME }} \
          -e WORDPRESS_DB_USER=${{ env.WORDPRESS_DB_USER }} \
          -e WORDPRESS_DB_PASSWORD=${{ env.WORDPRESS_DB_PASSWORD }} \
          -e WORDPRESS_CONFIG_EXTRA="
            define('WP_DEBUG', true);
            define('WP_DEBUG_LOG', true);
            define('SCRIPT_DEBUG', true);
            define('DISALLOW_FILE_EDIT', false);
            define('FS_METHOD', 'direct');
          " \
          wordpress:${{ matrix.wordpress_config.version }}

    - name: Wait for WordPress to be ready
      run: |
        timeout 180 bash -c 'until curl -f http://localhost:${{ matrix.wordpress_config.port }}/wp-admin/install.php; do sleep 5; done'

    - name: Install WordPress CLI
      run: |
        docker exec wp-${{ matrix.wordpress_config.name }} bash -c "
          curl -O https://raw.githubusercontent.com/wp-cli/wp-cli/v2.8.1/utils/wp-completion.bash
          curl -sL https://github.com/wp-cli/wp-cli/releases/download/v2.8.1/wp-cli-2.8.1.phar -o wp-cli.phar
          chmod +x wp-cli.phar
          mv wp-cli.phar /usr/local/bin/wp
        "

    - name: Configure WordPress Installation
      run: |
        docker exec wp-${{ matrix.wordpress_config.name }} wp core install \
          --url=http://localhost:${{ matrix.wordpress_config.port }} \
          --title="Security Test Site - ${{ matrix.wordpress_config.name }}" \
          --admin_user=${{ env.WORDPRESS_ADMIN_USER }} \
          --admin_password=${{ env.WORDPRESS_ADMIN_PASS }} \
          --admin_email=${{ env.WORDPRESS_ADMIN_EMAIL }} \
          --allow-root

    - name: Install Vulnerable Plugins and Themes
      run: |
        # Install specified plugins
        IFS=',' read -ra PLUGINS <<< "${{ matrix.wordpress_config.plugins }}"
        for plugin in "${PLUGINS[@]}"; do
          docker exec wp-${{ matrix.wordpress_config.name }} wp plugin install $plugin --activate --allow-root || true
        done
        
        # Install and activate theme
        docker exec wp-${{ matrix.wordpress_config.name }} wp theme install ${{ matrix.wordpress_config.theme }} --activate --allow-root || true
        
        # Add some additional vulnerable configurations for testing
        docker exec wp-${{ matrix.wordpress_config.name }} wp option update users_can_register 1 --allow-root
        docker exec wp-${{ matrix.wordpress_config.name }} wp option update default_role editor --allow-root
        
        # Create test users with weak passwords
        docker exec wp-${{ matrix.wordpress_config.name }} wp user create testuser test@example.com --user_pass=123456 --role=administrator --allow-root || true
        docker exec wp-${{ matrix.wordpress_config.name }} wp user create demo demo@example.com --user_pass=password --role=editor --allow-root || true

    - name: Install WPScan
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev
        sudo gem install wpscan

    - name: Update WPScan Database
      run: |
        wpscan --update || true

    - name: Run WPScan - Enumerate Users
      continue-on-error: true
      run: |
        echo "=== WPScan Results for ${{ matrix.wordpress_config.name }} - User Enumeration ===" | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt
        wpscan --url http://localhost:${{ matrix.wordpress_config.port }} \
          --enumerate u \
          --format cli \
          --output wpscan-users-${{ matrix.wordpress_config.name }}.txt || true
        cat wpscan-users-${{ matrix.wordpress_config.name }}.txt | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt

    - name: Run WPScan - Enumerate Plugins
      continue-on-error: true
      run: |
        echo -e "\n=== Plugin Enumeration ===" | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt
        wpscan --url http://localhost:${{ matrix.wordpress_config.port }} \
          --enumerate p \
          --plugins-detection aggressive \
          --format cli \
          --output wpscan-plugins-${{ matrix.wordpress_config.name }}.txt || true
        cat wpscan-plugins-${{ matrix.wordpress_config.name }}.txt | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt

    - name: Run WPScan - Enumerate Themes
      continue-on-error: true
      run: |
        echo -e "\n=== Theme Enumeration ===" | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt
        wpscan --url http://localhost:${{ matrix.wordpress_config.port }} \
          --enumerate t \
          --format cli \
          --output wpscan-themes-${{ matrix.wordpress_config.name }}.txt || true
        cat wpscan-themes-${{ matrix.wordpress_config.name }}.txt | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt

    - name: Run WPScan - Vulnerability Scan
      continue-on-error: true
      run: |
        echo -e "\n=== Vulnerability Scan ===" | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt
        wpscan --url http://localhost:${{ matrix.wordpress_config.port }} \
          --enumerate vp,vt \
          --detection-mode aggressive \
          --format cli \
          --output wpscan-vulns-${{ matrix.wordpress_config.name }}.txt || true
        cat wpscan-vulns-${{ matrix.wordpress_config.name }}.txt | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt

    - name: Run WPScan - Brute Force Attack Simulation
      continue-on-error: true
      env:
        WPSCAN_API_TOKEN: ${{ secrets.vlad_marius_WPSCAN_API_TOKEN }}
      run: |
        echo -e "\n=== Brute Force Attack Simulation ===" | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt
        # Create a small wordlist for testing
        echo -e "admin\npassword\n123456\nwordpress\ntest\ndemo\nroot" > small_wordlist.txt
        
        wpscan --url http://localhost:${{ matrix.wordpress_config.port }} \
          --usernames ${{ env.WORDPRESS_ADMIN_USER }},testuser,demo,admin \
          --passwords small_wordlist.txt \
          --max-threads 5 \
          --format cli \
          --output wpscan-bruteforce-${{ matrix.wordpress_config.name }}.txt || true
        cat wpscan-bruteforce-${{ matrix.wordpress_config.name }}.txt | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt

    - name: Run Additional Security Checks
      continue-on-error: true
      run: |
        echo -e "\n=== Additional Security Checks ===" | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt
        
        # Check for exposed sensitive files
        echo "Checking for exposed sensitive files:" | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt
        for file in wp-config.php.bak readme.html license.txt wp-config-sample.php; do
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ matrix.wordpress_config.port }}/$file)
          echo "- $file: HTTP $response" | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt
        done
        
        # Check directory listing
        echo -e "\nChecking for directory listing:" | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt
        for dir in wp-content wp-includes wp-admin; do
          response=$(curl -s http://localhost:${{ matrix.wordpress_config.port }}/$dir/ | grep -i "index of" && echo "EXPOSED" || echo "PROTECTED")
          echo "- $dir/: $response" | tee -a wpscan-results-${{ matrix.wordpress_config.name }}.txt
        done

    - name: Analyze Findings and Generate Security Report
      run: |
        echo "=== SECURITY ANALYSIS REPORT FOR ${{ matrix.wordpress_config.name }} ===" | tee security-report-${{ matrix.wordpress_config.name }}.txt
        echo "WordPress Version: ${{ matrix.wordpress_config.version }}" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "Plugins: ${{ matrix.wordpress_config.plugins }}" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "Theme: ${{ matrix.wordpress_config.theme }}" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "Scan Date: $(date)" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        
        # Count vulnerabilities
        vuln_count=$(grep -c "Title:" wpscan-results-${{ matrix.wordpress_config.name }}.txt || echo "0")
        user_count=$(grep -c "Username:" wpscan-results-${{ matrix.wordpress_config.name }}.txt || echo "0")
        plugin_count=$(grep -c "Plugin:" wpscan-results-${{ matrix.wordpress_config.name }}.txt || echo "0")
        
        echo "FINDINGS SUMMARY:" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "- Vulnerabilities Found: $vuln_count" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "- Users Enumerated: $user_count" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "- Plugins Detected: $plugin_count" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        
        echo "POTENTIAL EXPLOITATION METHODS:" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "1. User Enumeration: Discovered usernames can be used for brute force attacks" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "2. Plugin Vulnerabilities: Outdated plugins may have known exploits" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "3. Weak Credentials: Default/weak passwords enable unauthorized access" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "4. Version Disclosure: WordPress version information aids targeted attacks" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt
        echo "5. Configuration Issues: Debug mode and file permissions may expose sensitive data" | tee -a security-report-${{ matrix.wordpress_config.name }}.txt

    - name: Display Complete Scan Results
      run: |
        echo "=== COMPLETE SCAN RESULTS FOR ${{ matrix.wordpress_config.name }} ==="
        cat wpscan-results-${{ matrix.wordpress_config.name }}.txt
        echo ""
        echo "=== SECURITY REPORT ==="
        cat security-report-${{ matrix.wordpress_config.name }}.txt

    - name: Upload Scan Results as Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wpscan-results-${{ matrix.wordpress_config.name }}
        path: |
          wpscan-results-${{ matrix.wordpress_config.name }}.txt
          security-report-${{ matrix.wordpress_config.name }}.txt
          wpscan-*-${{ matrix.wordpress_config.name }}.txt
        retention-days: 30

    - name: Cleanup Docker Containers
      if: always()
      run: |
        docker stop wp-${{ matrix.wordpress_config.name }} mysql-${{ matrix.wordpress_config.name }} || true
        docker rm wp-${{ matrix.wordpress_config.name }} mysql-${{ matrix.wordpress_config.name }} || true

  security-summary:
    needs: wordpress-security-scan
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all scan results
      uses: actions/download-artifact@v4
      
    - name: Generate Combined Security Report
      run: |
        echo "=== COMBINED SECURITY ASSESSMENT REPORT ===" > combined-security-report.txt
        echo "Generated: $(date)" >> combined-security-report.txt
        echo "GitHub Actions Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> combined-security-report.txt
        echo "" >> combined-security-report.txt
        
        echo "TESTED CONFIGURATIONS:" >> combined-security-report.txt
        echo "1. WordPress Latest (Port 8080) - Modern setup with current plugins" >> combined-security-report.txt
        echo "2. WordPress Legacy v5.8 (Port 8081) - Older version with popular plugins" >> combined-security-report.txt
        echo "3. WordPress Vulnerable v5.0 (Port 8082) - Intentionally vulnerable setup" >> combined-security-report.txt
        echo "" >> combined-security-report.txt
        
        echo "SECURITY RECOMMENDATIONS:" >> combined-security-report.txt
        echo "- Update WordPress core and all plugins to latest versions" >> combined-security-report.txt
        echo "- Implement strong password policies and two-factor authentication" >> combined-security-report.txt
        echo "- Disable user enumeration and limit login attempts" >> combined-security-report.txt
        echo "- Remove default/unused themes and plugins" >> combined-security-report.txt
        echo "- Implement Web Application Firewall (WAF)" >> combined-security-report.txt
        echo "- Regular security audits and vulnerability scanning" >> combined-security-report.txt
        echo "- Secure file permissions and disable file editing in admin panel" >> combined-security-report.txt
        
        cat combined-security-report.txt
        
    - name: Upload Combined Report
      uses: actions/upload-artifact@v4
      with:
        name: combined-security-assessment
        path: combined-security-report.txt
        retention-days: 90
