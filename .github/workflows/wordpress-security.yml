name: WordPress Security Scanner

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC for continuous monitoring
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      wordpress_versions:
        description: 'WordPress versions to test (comma-separated)'
        required: false
        default: 'latest,5.8,5.9,6.0'
      scan_intensity:
        description: 'WPScan intensity level'
        required: false
        default: 'aggressive'
        type: choice
        options:
        - passive
        - aggressive

jobs:
  wordpress-security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        wordpress_version: [latest, '5.8', '5.9', '6.0', '6.1']
        theme: [twentytwentythree, twentytwentytwo, storefront]
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create WordPress environment files
      run: |
        mkdir -p wordpress-configs
        
        # Create docker-compose for WordPress
        cat > wordpress-configs/docker-compose.yml << 'EOF'
        version: '3.8'
        
        services:
          wordpress:
            image: wordpress:${{ matrix.wordpress_version }}
            container_name: wp-security-test-${{ matrix.wordpress_version }}
            ports:
              - "8080:80"
            environment:
              WORDPRESS_DB_HOST: db
              WORDPRESS_DB_USER: ${{ secrets.vlad_marius_DB_USER || 'wpuser' }}
              WORDPRESS_DB_PASSWORD: ${{ secrets.vlad_marius_DB_PASS || 'defaultpass123' }}
              WORDPRESS_DB_NAME: ${{ secrets.vlad_marius_DB_NAME || 'wordpress' }}
              WORDPRESS_DEBUG: 1
            volumes:
              - wordpress_data:/var/www/html
              - ./wp-config-additional.php:/var/www/html/wp-config-additional.php
            depends_on:
              - db
            networks:
              - wp-network

          db:
            image: mysql:8.0
            container_name: wp-db-${{ matrix.wordpress_version }}
            environment:
              MYSQL_ROOT_PASSWORD: ${{ secrets.vlad_marius_ROOT_PASS || 'rootpass123' }}
              MYSQL_DATABASE: ${{ secrets.vlad_marius_DB_NAME || 'wordpress' }}
              MYSQL_USER: ${{ secrets.vlad_marius_DB_USER || 'wpuser' }}
              MYSQL_PASSWORD: ${{ secrets.vlad_marius_DB_PASS || 'defaultpass123' }}
            volumes:
              - db_data:/var/lib/mysql
            networks:
              - wp-network

        volumes:
          wordpress_data:
          db_data:

        networks:
          wp-network:
            driver: bridge
        EOF

        # Create additional WordPress config with security issues for testing
        cat > wordpress-configs/wp-config-additional.php << 'EOF'
        <?php
        // Additional WordPress configuration for security testing
        define('WP_DEBUG', true);
        define('WP_DEBUG_LOG', true);
        define('WP_DEBUG_DISPLAY', true);
        
        // Intentionally weak configuration for testing
        define('DISALLOW_FILE_EDIT', false);
        define('AUTOMATIC_UPDATER_DISABLED', true);
        
        // Add some potentially vulnerable plugins/themes for testing
        if (!defined('ABSPATH')) {
            define('ABSPATH', dirname(__FILE__) . '/');
        }
        EOF

    - name: Start WordPress containers
      working-directory: wordpress-configs
      run: |
        echo "Starting WordPress ${{ matrix.wordpress_version }} with theme ${{ matrix.theme }}"
        docker-compose up -d
        
        # Wait for services to be ready
        echo "Waiting for WordPress to be ready..."
        timeout=300
        while [ $timeout -gt 0 ]; do
          if curl -s http://localhost:8080 | grep -q "WordPress"; then
            echo "WordPress is ready!"
            break
          fi
          echo "Waiting... (${timeout}s remaining)"
          sleep 10
          timeout=$((timeout-10))
        done
        
        if [ $timeout -le 0 ]; then
          echo "WordPress failed to start properly"
          docker-compose logs
          exit 1
        fi

    - name: Install WPScan
      run: |
        # Install WPScan using Docker for consistency
        docker pull wpscanteam/wpscan:latest
        
        # Create WPScan alias for easier usage
        echo '#!/bin/bash' > /tmp/wpscan
        echo 'docker run --rm --network wordpress-configs_wp-network -v $(pwd):/output wpscanteam/wpscan "$@"' >> /tmp/wpscan
        chmod +x /tmp/wpscan
        sudo mv /tmp/wpscan /usr/local/bin/wpscan

    - name: Configure WordPress for testing
      run: |
        # Install WordPress CLI for configuration
        curl -O https://raw.githubusercontent.com/wp-cli/wp-cli/v2.8.1/phar/wp-cli.phar
        chmod +x wp-cli.phar
        
        # Wait a bit more for WordPress to fully initialize
        sleep 30
        
        # Basic WordPress setup via API calls (since WP-CLI needs direct file access)
        echo "Configuring WordPress for security testing..."
        
        # Try to install a potentially vulnerable plugin for testing
        curl -X POST "http://localhost:8080/wp-admin/admin-ajax.php" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "action=install-plugin&plugin=hello-dolly" || true

    - name: Run comprehensive WPScan
      env:
        WPSCAN_API_TOKEN: ${{ secrets.vlad_marius_WPSCAN_API_TOKEN }}
      run: |
        echo "Running WPScan against WordPress ${{ matrix.wordpress_version }}"
        mkdir -p scan-results
        
        # Basic enumeration scan
        echo "=== Running Basic Enumeration Scan ===" | tee scan-results/wpscan-${{ matrix.wordpress_version }}-${{ matrix.theme }}.log
        wpscan --url http://wordpress:8080 \
          --enumerate ap,at,tt,cb,dbe \
          --format cli \
          --output scan-results/basic-${{ matrix.wordpress_version }}-${{ matrix.theme }}.json \
          --format json 2>&1 | tee -a scan-results/wpscan-${{ matrix.wordpress_version }}-${{ matrix.theme }}.log || true
        
        # Aggressive scan with vulnerability detection
        echo -e "\n=== Running Aggressive Vulnerability Scan ===" | tee -a scan-results/wpscan-${{ matrix.wordpress_version }}-${{ matrix.theme }}.log
        wpscan --url http://wordpress:8080 \
          --enumerate ap,at,tt,cb,dbe,u,m \
          --plugins-detection aggressive \
          --themes-detection aggressive \
          --api-token "${WPSCAN_API_TOKEN:-}" \
          --format cli \
          --output scan-results/aggressive-${{ matrix.wordpress_version }}-${{ matrix.theme }}.json \
          --format json 2>&1 | tee -a scan-results/wpscan-${{ matrix.wordpress_version }}-${{ matrix.theme }}.log || true
        
        # Password brute force attempt (with common passwords)
        echo -e "\n=== Running Password Brute Force Test ===" | tee -a scan-results/wpscan-${{ matrix.wordpress_version }}-${{ matrix.theme }}.log
        echo -e "admin\nadministrator\ntest\npassword\n123456\nwordpress" > common-passwords.txt
        wpscan --url http://wordpress:8080 \
          --usernames admin,administrator,test \
          --passwords common-passwords.txt \
          --max-threads 5 \
          --format cli 2>&1 | tee -a scan-results/wpscan-${{ matrix.wordpress_version }}-${{ matrix.theme }}.log || true
        
        # Config backup and sensitive file detection
        echo -e "\n=== Checking for Sensitive Files ===" | tee -a scan-results/wpscan-${{ matrix.wordpress_version }}-${{ matrix.theme }}.log
        for file in wp-config.php.bak wp-config.php~ .wp-config.php.swp readme.html xmlrpc.php; do
          echo "Checking for $file..." | tee -a scan-results/wpscan-${{ matrix.wordpress_version }}-${{ matrix.theme }}.log
          curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" "http://localhost:8080/$file" | tee -a scan-results/wpscan-${{ matrix.wordpress_version }}-${{ matrix.theme }}.log
        done

    - name: Analyze scan results and generate report
      run: |
        echo "=== SECURITY SCAN ANALYSIS REPORT ===" > security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        echo "WordPress Version: ${{ matrix.wordpress_version }}" >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        echo "Theme: ${{ matrix.theme }}" >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        echo "Scan Date: $(date)" >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        echo "" >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        
        # Parse JSON results if available
        if [ -f "scan-results/aggressive-${{ matrix.wordpress_version }}-${{ matrix.theme }}.json" ]; then
          echo "## Vulnerability Summary" >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
          
          # Extract key findings from JSON
          vulnerabilities=$(jq -r '.vulnerabilities // [] | length' scan-results/aggressive-${{ matrix.wordpress_version }}-${{ matrix.theme }}.json 2>/dev/null || echo "0")
          echo "Total Vulnerabilities Found: $vulnerabilities" >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
          
          # Extract WordPress version info
          wp_version=$(jq -r '.version.number // "Unknown"' scan-results/aggressive-${{ matrix.wordpress_version }}-${{ matrix.theme }}.json 2>/dev/null || echo "Unknown")
          echo "Detected WordPress Version: $wp_version" >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        fi
        
        echo "" >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        echo "## Detailed Scan Log" >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        echo '```' >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        cat scan-results/wpscan-${{ matrix.wordpress_version }}-${{ matrix.theme }}.log >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        echo '```' >> security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        
        # Display summary to job log
        echo "=== SCAN SUMMARY FOR WordPress ${{ matrix.wordpress_version }} with ${{ matrix.theme }} ===="
        cat security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md

    - name: Check Docker container logs
      if: always()
      working-directory: wordpress-configs
      run: |
        echo "=== WordPress Container Logs ==="
        docker-compose logs wordpress || true
        echo "=== Database Container Logs ==="
        docker-compose logs db || true

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: wpscan-results-${{ matrix.wordpress_version }}-${{ matrix.theme }}
        path: |
          scan-results/
          security-report-${{ matrix.wordpress_version }}-${{ matrix.theme }}.md
        retention-days: 30

    - name: Cleanup containers
      if: always()
      working-directory: wordpress-configs
      run: |
        docker-compose down -v
        docker system prune -f

  security-summary:
    needs: wordpress-security-scan
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all scan results
      uses: actions/download-artifact@v4
      with:
        path: all-results

    - name: Generate consolidated security report
      run: |
        echo "# WordPress Security Scan - Consolidated Report" > SECURITY_FINDINGS.md
        echo "Generated: $(date)" >> SECURITY_FINDINGS.md
        echo "" >> SECURITY_FINDINGS.md
        
        echo "## Executive Summary" >> SECURITY_FINDINGS.md
        echo "This automated security scan tested multiple WordPress versions and themes for common vulnerabilities." >> SECURITY_FINDINGS.md
        echo "" >> SECURITY_FINDINGS.md
        
        echo "## Individual Scan Results" >> SECURITY_FINDINGS.md
        find all-results -name "security-report-*.md" -exec echo "### {}" \; -exec cat {} \; -exec echo "" \; >> SECURITY_FINDINGS.md
        
        echo "## Security Recommendations" >> SECURITY_FINDINGS.md
        cat >> SECURITY_FINDINGS.md << 'EOF'
        
        ### Critical Actions Required:
        1. **Update WordPress Core**: Always use the latest WordPress version
        2. **Plugin Management**: Remove unused plugins, update active ones regularly
        3. **Theme Security**: Use well-maintained themes from trusted sources
        4. **Strong Authentication**: Implement 2FA and strong password policies
        5. **File Permissions**: Properly configure file and directory permissions
        6. **Security Headers**: Implement proper HTTP security headers
        7. **Regular Monitoring**: Set up continuous security monitoring
        
        ### Common Exploitation Vectors Found:
        - **Version Disclosure**: Information leakage through version strings
        - **Default Credentials**: Using default admin credentials
        - **Plugin Vulnerabilities**: Outdated or vulnerable plugins
        - **File Upload Issues**: Unrestricted file upload capabilities
        - **SQL Injection**: Through vulnerable plugins or themes
        - **Cross-Site Scripting (XSS)**: In comments, posts, or admin areas
        EOF
        
        # Display the report
        cat SECURITY_FINDINGS.md

    - name: Upload consolidated report
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-security-report
        path: SECURITY_FINDINGS.md
        retention-days: 90
